using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Week04Homework
{
    //Object 클래스를 상속한 Department
    class Department : object
    {
        //(instance) field
        private string _code;
        private string _name;

        //속성, property
        //getter와 setter를 한번에 구현
        //정의: 메소드와 유사
        //사용: 변수와 유사
        public string Code
        {
            get
            {
                return _code;
            }

            private set
            {
                if (false == string.IsNullOrEmpty(value))
                {
                    _code = value;
                }
                else
                {
                    _code = "[ERR] " + value;
                }
            }
        }

        public string Name
        {
            get
            {
                return _name;
            }

            private set
            {
                if (false == string.IsNullOrEmpty(value) && value.Length >= 2)
                {
                    _name = value;
                }
                else
                {
                    _name = "[ERR] " + value;
                }
            }
        }

        //overloading
        //동일한 이름의 메소드를 만들 수 있음
        //매개변수의 갯수나 형을 다르게 함

        //생성자(constructor)
        //반환X
        //클래스 이름과 동일
        //기본 생성자(default constructor)
        //하나도 없을 시 컴파일러가 기본적으로 만듦
        public Department()
        {

        }

        public Department(string code, string name)
        {
            Code = code;
            Name = name;
        }
        /*
        //getter
        public string GetCode()
        {
            return _code;
        }
        //setter
        private void SetCode(string value)
        {
            if (false == string.IsNullOrEmpty(value))
            {
                _code = value;
            }
        }*/

        //instance method
        public override string ToString()
        {
            return $"[{Code}] {Name}";
        }
    }
}
